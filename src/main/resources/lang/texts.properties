# Common
gui.common.x=X:
gui.common.y=Y:
gui.common.width=Width:
gui.common.height=Height:
elementGui.jei.requiresJEI=This mod element requires jei to be activated in the workspace settings
dialog.preferences.page_rendering_templates=JEI Rendering templates

# Mod Elements
  # Information
modelement.information=JEI Information
modelement.information.description=Information about a group of items, displayed in JEI
elementGui.information.information=Information
elementGui.information.type=Information Type:
elementGui.information.items=Items with information:
elementGui.information.fluids=Fluids with information:
elementGui.information.info=Information description displayed by JEI in game:
  # Recipe Type
modelement.recipe_type=Recipe Type
modelement.recipe_type.description=Custom recipe type, that will be shown in JEI
elementGui.recipeType.pageProperties=Properties
elementGui.recipeType.pageSlots=Recipe Slots
elementGui.recipeType.pageDraw=Render GUI
elementGui.recipeType.pageClickable=Clickable Areas
elementGui.recipeType.jeiTexture=JEI Texture
elementGui.recipeType.texture=Texture
elementGui.recipeType.properties=Properties
elementGui.recipeType.title=Title:
elementGui.recipeType.icon=Displayed Icon:
elementGui.recipeType.enableTables=Enable recipe blocks:
elementGui.recipeType.tables=Recipe blocks:
elementGui.recipeType.enableRender=Enable advanced rendering:
elementGui.recipeType.blocklyRender=Rendering
elementGui.recipeType.enableClickArea=Enable clickable Gui areas
  # Custom Recipes
modelement.custom_recipe=Custom Recipe
modelement.custom_recipe.description=A custom recipe based on a set recipe type
elementGui.customRecipe.recipeType=Select Recipe Type:

# List Entries
  # Slots
elementGui.slots.addSlot=Add Slot
elementGui.slots.slotList=Slot entries
elementGui.slots.io=IO:
elementGui.slots.type=Type:
elementGui.slots.name=Name:
elementGui.slots.single=Single Item:
elementGui.slots.tank=Use full tank:
elementGui.slots.tankCapacity=Tank Capacity:
elementGui.slots.optional=Optional:
elementGui.slots.resource=Set renderable texture:
elementGui.slots.defaultValue=Set default value:
  # Click Area
elementGui.click.addClickArea=Add Click Area
elementGui.click.clickList=Click area entries
  # Recipe IOs
elementGui.rio.input=Input
elementGui.rio.output=Output
elementGui.rio.name=Name:
elementGui.rio.item=Item
elementGui.rio.fluid=Fluid
elementGui.rio.logic=Logic
elementGui.rio.number=Number
elementGui.rio.text=Text
elementGui.rio.amount=Amount:
elementGui.rio.mb=mB
elementGui.rio.addRio=Add
elementGui.rio.list_input=Recipe Input List
elementGui.rio.list_output=Recipe Output List

# Error
  # Information
elementGui.information.errorEmptyItem=Select at least one item to show the information.
elementGui.information.errorEmptyFluid=Select at least one fluid to show the information.
elementGui.information.errorEmptyInfo=The information about an item cannot be empty.
  # Recipe Type
elementGui.recipeType.errorNoTexture=There was no texture selected.
elementGui.recipeType.errorTextureSize=The selected texture has to be 256 by 256 pixel in size.



# Procedures
  # Mutator Lists
    # Text List
blockly.block.text_mutator.container=Join
blockly.block.text_mutator.input=Item
    # Tooltip List
blockly.block.tooltip_mutator.container=Tooltip
blockly.block.tooltip_mutator.input=Entry
blockly.block.tooltip_mutator.line=Line
    # Recipe Ingredients
blockly.block.ingredient_mutator.container=Recipe Ingredients
blockly.block.ingredient_mutator.input=Ingredient
blockly.block.ingredient_mutator.ingredient_type=Type:
blockly.block.ingredient_mutator.ingredient_name=Name:
blockly.block.ingredient_mutator.ingredient_consume=Consume:
blockly.block.ingredient_mutator.ingredient_input=Input:


  # JEI Render
    # Categories
blockly.category.jei_category_rendering=Category Rendering
blockly.category.jei_category_variables=Category Variables
blockly.category.jei_logic=Logic
blockly.category.jei_number=Number
blockly.category.jei_text=Text

    # Start
blockly.block.render_start=JEI renderer start

    # Variables
blockly.block.jei_variables_getLogicValue=Get %1 logic value with name %2
blockly.block.jei_variables_getNumberValue=Get %1 number value with name %2
blockly.block.jei_variables_getTextValue=Get %1 text value with name %2
blockly.block.jei_variables_getItemStackName=Get %1 itemstack display name with name %2
blockly.block.jei_variables_getItemStackAmount=Get %1 itemstack amount with name %2
blockly.block.jei_variables_getFluidStackName=Get %1 fluidstack display name with name %2
blockly.block.jei_variables_getFluidStackAmount=Get %1 fluidstack amount with name %2
    # Rendering
blockly.block.jei_render_text=Render text at x: %1 y: %2 : %3 with shadow: %4
blockly.block.jei_render_tooltip=Render tooltip at x: %1 y: %2 and a width: %3 height: %4 with a lines:
blockly.block.jei_render_texture=Render texture %1 with a texture x: %2 texture y: %3 at gui x: %4 gui y: %5 with width: %6 height: %7
blockly.block.jei_render_getAnimatedWidth=Get animated width from a max width: %2 and a duration: %1
blockly.block.jei_render_getAnimatedHeight=Get animated height from a max height: %2 and a duration: %1
    # Logic
blockly.block.jei_logic_ifBlock=if %1 do %2
blockly.block.jei_logic_ifBlock.do=do
blockly.block.jei_logic_ifBlock.elseif=else if
blockly.block.jei_logic_ifBlock.else=else
blockly.block.jei_logic_ifThenElse=If %1 then %2 else %3
blockly.block.jei_logic_not=not %1
blockly.block.jei_logic_input=%1
blockly.block.jei_logic_compare=%1 %2 %3
blockly.block.jei_number_compare=%1 %2 %3
blockly.block.jei_text_compare=%1 %2 %3
blockly.block.jei_logic_executeTick=Every %1 ticks %2 do %3
    # Numbers
blockly.block.jei_number_input=%1
blockly.block.jei_number_operator=%1 %2 %3
blockly.block.jei_number_math=%2 %1
blockly.block.jei_number_fromText=Number from text %1
blockly.block.jei_number_mouseX=Mouse X
blockly.block.jei_number_mouseY=Mouse Y
    # Text
blockly.block.jei_text_input=%1
blockly.block.jei_text_join=Create text with: %1
blockly.block.jei_text_length=Length of text: %1
blockly.block.jei_text_indexOf=Index of: %2 in: %1 start looking from: %3
blockly.block.jei_text_isEmpty=Is text empty %1
blockly.block.jei_text_replace=Replace: %2 with: %3 on: %1
blockly.block.jei_text_replaceAll=Replace all matches: %2 with: %3 on: %1
blockly.block.jei_text_substringFrom=Substring: %1 from position: %2
blockly.block.jei_text_substringFromTo=Substring: %1 from position: %2 to position: %3
blockly.block.jei_text_contains=Does text %1 contains %2
blockly.block.jei_text_match=Does text %1 match text %2
blockly.block.jei_text_startsWith=Does text %1 start with %2
blockly.block.jei_text_endsWith=Does text %1 end with %2
blockly.block.jei_text_trim=Trim text: %1
blockly.block.jei_text_upperCase=Uppercase text: %1
blockly.block.jei_text_lowerCase=Lowercase text: %1
blockly.block.jei_text_formatting=Format number: %1 with pattern: %2
blockly.block.jei_text_translate=Get localized text for key %1 %2


  # Procedures
    # Categories
blockly.category.jei_integration=JEI Integration
blockly.category.jei_recipes=Recipes
blockly.category.jei_result_lists=Result lists
blockly.category.jei_utils=Utils

    # Recipes
blockly.block.jei_recipes_getRecipeItemStackOutput=Get the itemstack output %1 of the recipe type %2 with the ingredients:
blockly.block.jei_recipes_getRecipeFluidStackOutput=Get the fluidstack output %1 of the recipe type %2 with the ingredients:
blockly.block.jei_recipes_getRecipeLogicOutput=Get the logic output %1 of the recipe type %2 with the ingredients:
blockly.block.jei_recipes_getRecipeNumberOutput=Get the number output %1 of the recipe type %2 with the ingredients:
blockly.block.jei_recipes_getRecipeTextOutput=Get the text output %1 of the recipe type %2 with the ingredients:
    # Recipe Lists
blockly.block.jei_list_getRecipeOutputList=Get a list of %1 output %2 of the recipe type %3 from the ingredients:
blockly.block.jei_list_isEmpty=Is output list %1 empty
blockly.block.jei_list_size=Get size of output list %1
blockly.block.jei_list_atIndex=Get %1 output from result list %2 at index %3
blockly.block.jei_list_contains=Does output list %2 contain %1 output %3
blockly.block.jei_list_getRandom=Get random %1 result from output list %2
blockly.block.jei_list_forEach=For each %1 output from output list %2 as %3 do %4
blockly.block.jei_list_listIterator=output iterator
    # Utils
blockly.block.jei_utils_getRecipeOutputAmount=Get the %1 output %2 amount of the recipe type %3 with the ingredients:
blockly.block.jei_utils_isRecipeValid=Does the recipe type %1 have a result from the ingredients:
blockly.block.jei_utils_getItemInSlot=Get item in Slot %4 of block at x: %1 y: %2 z: %3
blockly.block.jei_utils_getFluidInTank=Get fluid in Tank %4 of block at x: %1 y: %2 z: %3
blockly.block.jei_utils_setItemWithAmount=Set item %5 with amount in slot %4 at x: %1 y: %2 z: %3 adjusting existing amount
blockly.block.jei_utils_setFluidWithAmount=Set fluid %5 with amount in tank %4 at x: %1 y: %2 z: %3 adjusting existing amount
    # Plugins
blockly.block.plugins_addListToArrayList=Add output list %1 to arraylist %2