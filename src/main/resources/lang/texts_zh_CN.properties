# Common
gui.common.x=X:
gui.common.y=Y:
gui.common.width=宽度:
gui.common.height=高度:
elementGui.jei.requiresJEI=此mod元素需要您在工作区设置启用JEI（Just enough recipes)
dialog.preferences.page_rendering_templates=JEI渲染模板

# Mod Elements
  # Information
modelement.information=JEI信息
modelement.information.description=信息是关于显示在JEI中一个组的物品
elementGui.information.information=信息
elementGui.information.type=信息类别:
elementGui.information.items=信息中的物品:
elementGui.information.fluids=信息中的流体:
elementGui.information.info=信息在游戏中的JEI显示的介绍:
  # Recipe Type
modelement.recipe_type=配方类型
modelement.recipe_type.description=自定义配方类型将会显示在JEI中
elementGui.recipeType.pageProperties=属性
elementGui.recipeType.pageSlots=配方槽位
elementGui.recipeType.pageDraw=渲染GUI
elementGui.recipeType.jeiTexture=JEI材质
elementGui.recipeType.texture=材质
elementGui.recipeType.clickAreas=点击区域
elementGui.recipeType.properties=属性
elementGui.recipeType.title=标题:
elementGui.recipeType.icon=显示图标:
elementGui.recipeType.enableTables=启用配方方块:
elementGui.recipeType.tables=配方关联方块:
elementGui.recipeType.enableRender=启用高级渲染:
elementGui.recipeType.blocklyRender=渲染
elementGui.recipeType.enableClickArea=启用点击区域
  # Custom Recipes
modelement.custom_recipe=自定义配方
modelement.custom_recipe.description=自定义配方基于配方类型
elementGui.customRecipe.recipeType=选择配方类别:

# List Entries
  # Slots
elementGui.slots.addSlot=添加槽位
elementGui.slots.slotList=槽位列表
elementGui.slots.io=输入输出:
elementGui.slots.type=类型:
elementGui.slots.name=名字:
elementGui.slots.single=单一物品:
elementGui.slots.tank=(Use full tank)使用全部容器:
elementGui.slots.tankCapacity=Tank Capacity容器容量:
elementGui.slots.optional=可选:
elementGui.slots.resource=设置渲染的材质:
elementGui.slots.defaultValue=设置默认值:
elementGui.slots.custom=自定义代码:
  # Click Area
elementGui.click.addClickArea=添加点击区域
elementGui.click.clickList=点击区域条目
  # Recipe IOs
elementGui.rio.input=输入
elementGui.rio.output=输出
elementGui.rio.name=名字:
elementGui.rio.item=物品
elementGui.rio.fluid=流体
elementGui.rio.logic=逻辑
elementGui.rio.number=数字
elementGui.rio.text=文本
elementGui.rio.amount=量:
elementGui.rio.mb=毫桶(mB)
elementGui.rio.addRio=添加
elementGui.rio.list_input=配方输入列表
elementGui.rio.list_output=配方输出列表

# Error
  # Information
elementGui.information.errorEmptyItem=选择至少一个物品来展示信息.
elementGui.information.errorEmptyFluid=选择至少一个流体来展示信息.
elementGui.information.errorEmptyInfo=关于物品的信息不能为空.
  # Recipe Type
elementGui.recipeType.errorNoTexture=您还尚未选择材质.
elementGui.recipeType.errorTextureSize=选择的材质尺寸必须是256像素x256像素.



# Procedures
  # Mutator Lists
    # Text List
blockly.block.text_mutator.container=加入
blockly.block.text_mutator.input=物品
    # Tooltip List
blockly.block.tooltip_mutator.container=Tooltip
blockly.block.tooltip_mutator.input=条目
blockly.block.tooltip_mutator.line=行/线
    # Recipe Ingredients
blockly.block.ingredient_mutator.container=配方原料
blockly.block.ingredient_mutator.input=原料
blockly.block.ingredient_mutator.ingredient_type=类别:
blockly.block.ingredient_mutator.ingredient_name=名称:
blockly.block.ingredient_mutator.ingredient_consume=消耗:
blockly.block.ingredient_mutator.ingredient_input=输入:


  # JEI Render
    # Categories
blockly.category.jei_category_rendering=类别渲染
blockly.category.jei_category_variables=类别变量
blockly.category.jei_logic=逻辑
blockly.category.jei_number=数字
blockly.category.jei_text=文本
blockly.category.jei_advanced=高级

    # Start
blockly.block.render_start=JEI渲染开始

    # Variables
blockly.block.jei_variables_getLogicValue=%1 中名为 %2 的逻辑值
blockly.block.jei_variables_getNumberValue=%1 中名为 %2 的数字值
blockly.block.jei_variables_getTextValue=%1 中名为 %2 的文本值
blockly.block.jei_variables_getItemStackName=%1 中显示名为 %2 的物品堆叠
blockly.block.jei_variables_getItemStackAmount=%1 中名为 %2 的物品堆叠的物品数量
blockly.block.jei_variables_getFluidStackName=%1 中名为 %2 的流体堆叠
blockly.block.jei_variables_getFluidStackAmount=%1 中名为 %2 的流体堆叠的流体数量
    # Rendering
blockly.block.jei_render_text=渲染颜色 %4 阴影 %5的文本 %3 于 x: %1 y: %2 
blockly.block.jei_render_tooltip=Render tooltip at x: %1 y: %2 and a width: %3 height: %4 with a lines: 
blockly.block.jei_render_texture=Render texture %1 with a texture x: %2 texture y: %3 at gui x: %4 gui y: %5 with width: %6 height: %7
blockly.block.jei_render_getAnimatedWidth=Get animated width from a max width: %2 and a duration: %1
blockly.block.jei_render_getAnimatedHeight=Get animated height from a max height: %2 and a duration: %1
    # Logic
blockly.block.jei_logic_ifBlock=如果 %1 则 %2
blockly.block.jei_logic_ifBlock.do=做
blockly.block.jei_logic_ifBlock.elseif=否则如果
blockly.block.jei_logic_ifBlock.else=否则
blockly.block.jei_logic_ifThenElse=如果 %1 那么 %2 否则 %3
blockly.block.jei_logic_not=非 %1
blockly.block.jei_logic_input=%1
blockly.block.jei_logic_compare=%1 %2 %3
blockly.block.jei_number_compare=%1 %2 %3
blockly.block.jei_text_compare=%1 %2 %3
blockly.block.jei_logic_executeTick=每 %1 刻 %2 做 %3
    # Numbers
blockly.block.jei_number_input=%1
blockly.block.jei_number_operator=%1 %2 %3
blockly.block.jei_number_math=%2 %1
blockly.block.jei_number_fromText=文本 %1 中获取的数字
blockly.block.jei_number_mouseX=鼠标X
blockly.block.jei_number_mouseY=鼠标Y
    # Text
blockly.block.jei_text_input=%1
blockly.block.jei_text_join=%1
blockly.block.jei_text_length=%1 的文本长度
blockly.block.jei_text_indexOf=%2 于 %1 的索引(起始索引: %3)
blockly.block.jei_text_isEmpty=文本 %1 为空
blockly.block.jei_text_replace=在 %1 用 %3 替换 %2 后的字符串
blockly.block.jei_text_replaceAll=在 %1 用 %3 全部替换 %2 后的字符串
blockly.block.jei_text_substringFrom=截断的字符串: %1 从: %2
blockly.block.jei_text_substringFromTo=截断的字符串: %1 从: %2 到: %3
blockly.block.jei_text_contains=文本 %1 存在 %2
blockly.block.jei_text_match=文本 %1 匹配 %2
blockly.block.jei_text_startsWith=文本 %1 以 %2 开头
blockly.block.jei_text_endsWith=文本 %1 以 %2 结尾
blockly.block.jei_text_trim=%1 修建后的文本
blockly.block.jei_text_upperCase=%1 大写后的文本
blockly.block.jei_text_lowerCase=%1 小写后的文本
blockly.block.jei_text_formatting=数字 %1 使用 %2 格式化后的文本
blockly.block.jei_text_translate=翻译键 %1 代表的翻译文本 %2
blockly.block.jei_text_color=%1 所代表的hex颜色
    # Advanced
blockly.block.jei_adv_java=自定义代码片段 %1
blockly.block.jei_adv_javaGet=自定义代码片段 %1


  # Procedures
    # Categories
blockly.category.jei_integration=JEI Integration
blockly.category.jei_recipes=配方
blockly.category.jei_result_lists=结果列表
# 我也喜欢保持原文
blockly.category.jei_utils=Utils

    # Recipes
blockly.block.jei_recipes_getRecipeItemStackOutput=Get the itemstack output %1 of the recipe type %2 with the ingredients:
blockly.block.jei_recipes_getRecipeFluidStackOutput=Get the fluidstack output %1 of the recipe type %2 with the ingredients:
blockly.block.jei_recipes_getRecipeLogicOutput=Get the logic output %1 of the recipe type %2 with the ingredients:
blockly.block.jei_recipes_getRecipeNumberOutput=Get the number output %1 of the recipe type %2 with the ingredients:
blockly.block.jei_recipes_getRecipeTextOutput=Get the text output %1 of the recipe type %2 with the ingredients:
    # Recipe Lists
blockly.block.jei_list_getRecipeOutputList=Get a list of %1 output %2 of the recipe type %3 from the ingredients:
blockly.block.jei_list_isEmpty=Is output list %1 empty
blockly.block.jei_list_size=Get size of output list %1
blockly.block.jei_list_atIndex=Get %1 output from result list %2 at index %3
blockly.block.jei_list_contains=Does output list %2 contain %1 output %3
blockly.block.jei_list_getRandom=Get random %1 result from output list %2
blockly.block.jei_list_forEach=For each %1 output from output list %2 as %3 do %4
blockly.block.jei_list_listIterator=output iterator
    # Utils
blockly.block.jei_utils_getRecipeOutputAmount=Get the %1 output %2 amount of the recipe type %3 with the ingredients:
blockly.block.jei_utils_isRecipeValid=Does the recipe type %1 have a result from the ingredients:
blockly.block.jei_utils_getItemInSlot=Get item in Slot %4 of block at x: %1 y: %2 z: %3
blockly.block.jei_utils_getFluidInTank=Get fluid in Tank %4 of block at x: %1 y: %2 z: %3
blockly.block.jei_utils_setItemWithAmount=Set item %5 with amount in slot %4 at x: %1 y: %2 z: %3 adjusting existing amount
blockly.block.jei_utils_setFluidWithAmount=Set fluid %5 with amount in tank %4 at x: %1 y: %2 z: %3 adjusting existing amount
blockly.block.jei_utils_createConsumableNumber=Create consumable number %1 with value %2
blockly.block.jei_utils_getConsumableNumber=Get consumable number %1
    # Plugins

blockly.block.plugins_addListToArrayList=将 %1 追加到arraylist %2

